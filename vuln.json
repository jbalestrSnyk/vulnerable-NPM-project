{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2020-11-08T09:37:44.217120Z",
      "credit": [
        "Dima Ryskin"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
      "disclosureTime": "2020-11-06T09:16:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.21.1"
      ],
      "id": "SNYK-JS-AXIOS-1038255",
      "identifiers": {
        "CWE": [
          "CWE-918"
        ],
        "NSP": [
          "NSP-1594"
        ],
        "CVE": [
          "CVE-2020-28168"
        ],
        "GHSA": [
          "GHSA-4w2v-q235-vp99"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-12T14:07:20.788739Z",
      "moduleName": "axios",
      "packageManager": "npm",
      "packageName": "axios",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-11-08T15:07:03Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/axios/axios/issues/3369"
        },
        {
          "title": "GitHub Security Advisory",
          "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99"
        },
        {
          "title": "NPM Advisory",
          "url": "https://www.npmjs.com/advisories/1594"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Server-Side Request Forgery (SSRF)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "cvssV3BaseScore": 5.9,
          "severity": "medium",
          "modificationTime": "2022-01-03T18:07:34.834041Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.21.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "axios@0.19.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "axios",
      "version": "0.19.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-01T10:21:55.102099Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
      "disclosureTime": "2021-09-01T10:17:45Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.21.3"
      ],
      "id": "SNYK-JS-AXIOS-1579269",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3749"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-22T15:25:03.056522Z",
      "moduleName": "axios",
      "packageManager": "npm",
      "packageName": "axios",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-01T16:08:42.935317Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-07-26T01:11:27.547463Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.21.3"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "axios@0.19.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "axios",
      "version": "0.19.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:F/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-12-07T14:51:46.208362Z",
      "credit": [
        "Aras Abbasi"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes.\r\n\r\n## PoC:\r\n```js\r\n    fetch('form-image', {\r\n      method: 'POST',\r\n      headers: {\r\n        ['content-type']: 'multipart/form-data; boundary=----WebKitFormBoundaryoo6vortfDzBsDiro',\r\n        ['content-length']: '145',\r\n        host: '127.0.0.1:8000',\r\n        connection: 'keep-alive',\r\n      },\r\n      body: '------WebKitFormBoundaryoo6vortfDzBsDiro\\r\\n Content-Disposition: form-data; name=\"bildbeschreibung\"\\r\\n\\r\\n\\r\\n------WebKitFormBoundaryoo6vortfDzBsDiro--'\r\n    });\r\n```\n## Remediation\nThere is no fixed version for `dicer`.\n## References\n- [GitHub Commit](https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac)\n- [GitHub Issue](https://github.com/mscdex/busboy/issues/250)\n- [GitHub PR](https://github.com/mscdex/dicer/pull/22)\n",
      "disclosureTime": "2021-12-07T14:51:02Z",
      "exploit": "Functional",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-DICER-2311764",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2022-24434"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T21:50:31.265376Z",
      "moduleName": "dicer",
      "packageManager": "npm",
      "packageName": "dicer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2022-05-19T10:52:23Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/mscdex/busboy/issues/250"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/mscdex/dicer/pull/22"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-06-07T13:11:23.181321Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "multer@1.4.4",
        "busboy@0.2.14",
        "dicer@0.2.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "dicer",
      "version": "0.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-04-07T11:52:46.618120Z",
      "credit": [
        "Avinash Hanwate"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[express-cart](https://www.npmjs.com/package/express-cart) is a fully functional shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). It allows a user to insert malicious payload in the user input field and the script gets reflected in the browser.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `express-cart`.\n## References\n- [HackerOne Report](https://hackerone.com/reports/395944)\n",
      "disclosureTime": "2019-04-07T09:19:38Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-EXPRESSCART-174131",
      "identifiers": {
        "CWE": [
          "CWE-79"
        ],
        "NSP": [
          "808"
        ],
        "CVE": [
          "CVE-2021-32573"
        ],
        "GHSA": [
          "GHSA-9pr3-7449-977r"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-05-12T09:31:19.323056Z",
      "moduleName": "express-cart",
      "packageManager": "npm",
      "packageName": "express-cart",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T11:53:01Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/395944"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Scripting (XSS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 4.8,
          "severity": "medium",
          "modificationTime": "2022-01-03T16:42:36.358325Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "express-cart",
      "version": "1.1.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-07-21T13:15:52.267242Z",
      "credit": [
        "saddean_"
      ],
      "cvssScore": 5.7,
      "description": "## Overview\n[express-cart](https://www.npmjs.com/package/express-cart) is a fully functional shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.\n\nAffected versions of this package are vulnerable to Cross-site Request Forgery (CSRF) via `admin.js`.\r\n\r\n## PoC:\r\n```\r\n<html>\r\n  <body>\r\n  <script>history.pushState('', '', '/')</script>\r\n    <form action=\"http://localhost:1111/admin/settings/discount/create\" method=\"POST\">\r\n      <input type=\"hidden\" name=\"code\" value=\"CSRF&#45;CODE&#45;DEMO\" />\r\n      <input type=\"hidden\" name=\"type\" value=\"percent\" />\r\n      <input type=\"hidden\" name=\"value\" value=\"30\" />\r\n      <input type=\"hidden\" name=\"start\" value=\"21&#47;02&#47;2020&#32;14&#58;32\" />\r\n      <input type=\"hidden\" name=\"end\" value=\"22&#47;02&#47;2020&#32;14&#58;32\" />\r\n      <input type=\"submit\" value=\"Submit request\" />\r\n    </form>\r\n  </body>\r\n</html>\r\n```\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/mrvautin/expressCart/commit/cd3ba1bc609c2f2946bfbc7ee2fccf3483eb71fb)\n- [HackerOne Report](https://hackerone.com/reports/800356)\n",
      "disclosureTime": "2020-07-21T07:58:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-EXPRESSCART-585983",
      "identifiers": {
        "CWE": [
          "CWE-352"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-07-21T15:12:55.514391Z",
      "moduleName": "express-cart",
      "packageManager": "npm",
      "packageName": "express-cart",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-21T15:12:55.512666Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mrvautin/expressCart/commit/cd3ba1bc609c2f2946bfbc7ee2fccf3483eb71fb"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/800356"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Cross-site Request Forgery (CSRF)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "express-cart",
      "version": "1.1.17"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-11T12:27:16.635235Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
      "disclosureTime": "2022-01-11T12:06:36Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.14.7"
      ],
      "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
      "identifiers": {
        "CWE": [
          "CWE-359"
        ],
        "CVE": [
          "CVE-2022-0155"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-12T12:49:36.151110Z",
      "moduleName": "follow-redirects",
      "packageManager": "npm",
      "packageName": "follow-redirects",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-12T12:49:36.149349Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
          "cvssV3BaseScore": 6.5,
          "severity": "medium",
          "modificationTime": "2022-02-09T16:10:37.080590Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.14.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "axios@0.19.2",
        "follow-redirects@1.5.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "follow-redirects",
      "version": "1.5.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-02-09T13:37:15.331538Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 2.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
      "disclosureTime": "2022-02-09T12:43:30Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.14.8"
      ],
      "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0536"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-09T17:20:22.056440Z",
      "moduleName": "follow-redirects",
      "packageManager": "npm",
      "packageName": "follow-redirects",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-09T17:20:22.054220Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "cvssV3BaseScore": 5.9,
          "severity": "medium",
          "modificationTime": "2022-06-10T20:08:08.637621Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "cvssV3BaseScore": 5.9,
          "severity": "medium",
          "modificationTime": "2022-02-12T04:10:26.549451Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.14.8"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "axios@0.19.2",
        "follow-redirects@1.5.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "follow-redirects",
      "version": "1.5.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-12-08T15:34:07.743781Z",
      "credit": [
        "Eugene Lim",
        "Government Technology Agency Cyber Security Group"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
      "disclosureTime": "2020-12-08T13:02:04Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.3.6"
      ],
      "id": "SNYK-JS-INI-1048974",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "GHSA": [
          "GHSA-qqgx-2p2h-9c37"
        ],
        "CVE": [
          "CVE-2020-7788"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-08-25T12:14:41.350475Z",
      "moduleName": "ini",
      "packageManager": "npm",
      "packageName": "ini",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-12-10T18:08:38Z",
      "references": [
        {
          "title": "Eugene Lim - Research Blog Post",
          "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "RHEL",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "cvssV3BaseScore": 7.3,
          "severity": "high",
          "modificationTime": "2022-05-31T17:25:44.582703Z"
        },
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "cvssV3BaseScore": 7.3,
          "severity": "high",
          "modificationTime": "2022-01-03T18:11:02.117501Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.3.6"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "npmconf@0.0.24",
        "ini@1.1.0"
      ],
      "upgradePath": [
        false,
        "npmconf@1.0.1",
        "ini@1.3.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ini",
      "version": "1.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-07-19T12:00:32.890460Z",
      "credit": [
        "awarau"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[lodash.set](https://www.npmjs.com/package/lodash.set) is a lodash method _.set exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `lodash.set`.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
      "disclosureTime": "2020-08-21T10:34:29Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-LODASHSET-1320032",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-08-25T12:14:41.622393Z",
      "moduleName": "lodash.set",
      "packageManager": "npm",
      "packageName": "lodash.set",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-21T12:53:03Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/864701"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "connect-mongodb-session@2.4.1",
        "archetype@0.12.0",
        "lodash.set@4.3.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash.set",
      "version": "4.3.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-08-31T17:55:54.822005Z",
      "credit": [
        "Alessio Della Libera of Snyk Research Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[mpath](https://www.npmjs.com/package/mpath) is a package that gets/sets javascript object values using MongoDB-like path notation.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2018-16490. In particular, the condition `ignoreProperties.indexOf(parts[i]) !== -1` returns `-1` if `parts[i]` is `['__proto__']`. This is because the method that has been called if the input is an array is `Array.prototype.indexOf()` and not `String.prototype.indexOf()`. They behave differently depending on the type of the input.\r\n\r\n### PoC\r\n```\r\nconst mpath = require('mpath');\r\n// mpath.set(['__proto__', 'polluted'], 'yes', {});\r\n// console.log(polluted); // ReferenceError: polluted is not defined\r\n\r\nmpath.set([['__proto__'], 'polluted'], 'yes', {});\r\nconsole.log(polluted); // yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mpath` to version 0.8.4 or higher.\n## References\n- [GitHub Commit](https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
      "disclosureTime": "2021-08-31T17:53:55Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.8.4"
      ],
      "id": "SNYK-JS-MPATH-1577289",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-23438"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-05T14:26:16.092807Z",
      "moduleName": "mpath",
      "packageManager": "npm",
      "packageName": "mpath",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-09-01T16:28:19Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "severity": "critical",
          "modificationTime": "2022-01-03T16:36:22.011339Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.8.4"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "connect-mongodb-session@2.4.1",
        "archetype@0.12.0",
        "mpath@0.5.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "mpath",
      "version": "0.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-11-11T13:28:06.593166Z",
      "credit": [
        "Vineet Kumar"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n[nodemailer](https://www.npmjs.org/package/nodemailer) is an Easy as cake e-mail sending from your Node.js applications\n\nAffected versions of this package are vulnerable to Command Injection. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.\r\n\r\n### PoC\r\n```\r\n-bi@example.com (-bi Initialize the alias database.)\r\n-d0.1a@example.com (The option -d0.1 prints the version of sendmail and the options it was compiled with.)\r\n-Dfilename@example.com (Debug output ffile)\r\n```\n## Remediation\nUpgrade `nodemailer` to version 6.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/nodemailer/nodemailer/commit/ba31c64c910d884579875c52d57ac45acc47aa54)\n- [Vulnerable Code](https://github.com/nodemailer/nodemailer/blob/33b62e2ea6bc9215c99a9bb4bfba94e2fb27ebd0/lib/sendmail-transport/index.js#L75)\n",
      "disclosureTime": "2020-11-11T13:17:31Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.4.16"
      ],
      "id": "SNYK-JS-NODEMAILER-1038834",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-48ww-j4fc-435p"
        ],
        "CVE": [
          "CVE-2020-7769"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:29.600807Z",
      "moduleName": "nodemailer",
      "packageManager": "npm",
      "packageName": "nodemailer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-11-12T16:54:00.101512Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/nodemailer/nodemailer/commit/ba31c64c910d884579875c52d57ac45acc47aa54"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/nodemailer/nodemailer/blob/33b62e2ea6bc9215c99a9bb4bfba94e2fb27ebd0/lib/sendmail-transport/index.js%23L75"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "severity": "critical",
          "modificationTime": "2022-01-03T18:10:13.792167Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<6.4.16"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "nodemailer@4.7.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nodemailer",
      "version": "4.7.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-24T11:54:07.769311Z",
      "credit": [
        "Adam Williams"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[nodemailer](https://www.npmjs.org/package/nodemailer) is an Easy as cake e-mail sending from your Node.js applications\n\nAffected versions of this package are vulnerable to HTTP Header Injection if unsanitized user input that may contain newlines and carriage returns is passed into an address object.\r\n\r\n### PoC:\r\n```\r\nconst userEmail = 'foo@bar.comrnSubject: foobar'; // imagine this comes from e.g. HTTP request params or is otherwise user-controllable\r\nawait transporter.sendMail({\r\nfrom: '...',\r\nto: '...',\r\nreplyTo: {\r\nname: 'Customer',\r\naddress: userEmail,\r\n},\r\nsubject: 'My Subject',\r\ntext: message,\r\n});\r\n```\n## Remediation\nUpgrade `nodemailer` to version 6.6.1 or higher.\n## References\n- [GitHub Commit](https://github.com/nodemailer/nodemailer/commit/7e02648cc8cd863f5085bad3cd09087bccf84b9f)\n- [GitHub Issue](https://github.com/nodemailer/nodemailer/issues/1289)\n",
      "disclosureTime": "2021-05-24T11:46:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.6.1"
      ],
      "id": "SNYK-JS-NODEMAILER-1296415",
      "identifiers": {
        "CWE": [
          "CWE-644"
        ],
        "CVE": [
          "CVE-2021-23400"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-06-28T16:21:02.032385Z",
      "moduleName": "nodemailer",
      "packageManager": "npm",
      "packageName": "nodemailer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-06-28T16:21:01.997291Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/nodemailer/nodemailer/commit/7e02648cc8cd863f5085bad3cd09087bccf84b9f"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/nodemailer/nodemailer/issues/1289"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "HTTP Header Injection",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "severity": "high",
          "modificationTime": "2022-01-03T16:36:04.677850Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<6.6.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "nodemailer@4.7.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nodemailer",
      "version": "4.7.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-17T14:35:00.993728Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
      "disclosureTime": "2021-09-17T14:32:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-NTHCHECK-1586032",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3803"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-13T10:42:22.281450Z",
      "moduleName": "nth-check",
      "packageManager": "npm",
      "packageName": "nth-check",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-17T15:20:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-07-30T01:10:54.517007Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "cheerio@0.22.0",
        "css-select@1.2.0",
        "nth-check@1.0.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nth-check",
      "version": "1.0.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:21:52.232749Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Validation Bypass. There is no proper validation of the hostnames set by the `allowedIframeHostnames` option when the `allowIframeRelativeUrls` is set to `true`. This allows attackers to bypass the hostname whitelist for the iframe element.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/460)\n- [POC: Potential Exploit](https://advisory.checkmarx.net/advisory/CX-2021-4309)\n",
      "disclosureTime": "2021-02-09T08:07:33Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.3.2"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070780",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-mjxr-4v3x-q3m4"
        ],
        "CVE": [
          "CVE-2021-26540"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.434343Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:45.881363Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
        },
        {
          "title": "POC: Potential Exploit",
          "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Validation Bypass",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-01-03T16:36:59.234021Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "sanitize-html@1.27.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.27.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2021-02-09T08:37:16.368073Z",
      "credit": [
        "Ron Masas",
        "Checkmarx"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. Internationalized domain name (IDN) is not properly handled. This allows attackers to bypass hostname whitelist validation set by the `allowedIframeHostnames` option.\n## Remediation\nUpgrade `sanitize-html` to version 2.3.1 or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/458)\n",
      "disclosureTime": "2021-02-09T08:21:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.3.1"
      ],
      "id": "SNYK-JS-SANITIZEHTML-1070786",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-rjqq-98f6-6j3r"
        ],
        "CVE": [
          "CVE-2021-26539"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-10-13T13:44:46.998835Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-02-09T16:34:49Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-04-27T01:10:36.338203Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.3.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "sanitize-html@1.27.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.27.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2022-07-21T08:00:56.827849Z",
      "credit": [
        "Nariyoshi Chida of NTT Security Japan"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.7.1 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/b4682c12fd30e12e82fa2d9b766de91d7d2cd23c)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/557)\n",
      "disclosureTime": "2022-07-21T07:37:40Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.7.1"
      ],
      "id": "SNYK-JS-SANITIZEHTML-2957526",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2022-25887"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-08-29T13:28:12.441729Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2022-08-29T13:28:12.439235Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/apostrophecms/sanitize-html/commit/b4682c12fd30e12e82fa2d9b766de91d7d2cd23c"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/557"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.7.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "sanitize-html@1.27.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.27.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
      "alternativeIds": [],
      "creationTime": "2020-07-17T15:02:43.082824Z",
      "credit": [
        "mikesamuel"
      ],
      "cvssScore": 9.4,
      "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. Tag transformations which turn an attribute value into a text node using `transformTags` could be vulnerable to code execution.\n## Remediation\nUpgrade `sanitize-html` to version 2.0.0-beta or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/156)\n",
      "disclosureTime": "2020-09-07T09:46:18Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.0-beta"
      ],
      "id": "SNYK-JS-SANITIZEHTML-585892",
      "identifiers": {
        "CWE": [
          "CWE-94"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-09-07T15:37:06.961614Z",
      "moduleName": "sanitize-html",
      "packageManager": "npm",
      "packageName": "sanitize-html",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-07T09:46:10Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/apostrophecms/sanitize-html/pull/156"
        }
      ],
      "severity": "critical",
      "socialTrendAlert": false,
      "title": "Arbitrary Code Execution",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.0-beta"
        ]
      },
      "severityWithCritical": "critical",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "sanitize-html@1.27.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "sanitize-html",
      "version": "1.27.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-09-30T14:25:50.130236Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n",
      "disclosureTime": "2021-09-30T14:22:21Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.14.3"
      ],
      "id": "SNYK-JS-UGLIFYJS-1727251",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-09T18:42:15.332622Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-09T18:42:15.313328Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/mishoo/UglifyJS/issues/5133"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/mishoo/UglifyJS/pull/5134"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/mishoo/UglifyJS/pull/5135"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.14.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "gulp-less@4.0.1",
        "accord@0.29.0",
        "uglify-js@2.8.29"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "uglify-js",
      "version": "2.8.29"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-DEBUG-10762"
      ],
      "creationTime": "2017-09-13T07:55:05.106000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
      "disclosureTime": "2017-09-05T21:00:00Z",
      "exploit": "Not Defined",
      "functions": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "className": null,
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "className": null,
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "fixedIn": [
        "2.6.9",
        "3.1.0"
      ],
      "id": "npm:debug:20170905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "534"
        ],
        "CVE": [
          "CVE-2017-16137"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-DEBUG-10762"
        ],
        "GHSA": [
          "GHSA-gxpj-cx7g-858c"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-22T17:02:11.626507Z",
      "moduleName": "debug",
      "packageManager": "npm",
      "packageName": "debug",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:0",
          "modificationTime": "2019-12-03T11:40:45.872397Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
          ],
          "version": ">= 3.0.0 <=3.0.1"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:1",
          "modificationTime": "2019-12-03T11:40:45.873422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.5.1 <2.6.9"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:2",
          "modificationTime": "2019-12-03T11:40:45.874399Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.4.0 <2.5.0"
        },
        {
          "comments": [],
          "id": "patch:npm:debug:20170905:3",
          "modificationTime": "2019-12-03T11:40:45.875363Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
          ],
          "version": ">=2.0.0 <2.4.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-26T03:55:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/debug/issues/501"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/debug/pull/504"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "severity": "medium",
          "modificationTime": "2022-01-03T16:21:42.477572Z"
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "src/node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">= 2.5.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        {
          "functionId": {
            "filePath": "node.js",
            "functionName": "exports.formatters.o"
          },
          "version": [
            ">=1.0.0 <2.5.0"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          ">=1.0.0 <2.6.9",
          ">=3.0.0 <3.1.0"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "i18n@0.8.6",
        "debug@2.2.0"
      ],
      "upgradePath": [
        false,
        "express-cart@1.1.17",
        "i18n@0.8.6",
        "debug@2.6.9"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "debug",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "functions": [
        {
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "fixedIn": [
        "2.0.0"
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-16T13:04:13.342145Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "i18n@0.8.6",
        "debug@2.2.0",
        "ms@0.7.1"
      ],
      "upgradePath": [
        false,
        "express-cart@1.1.17",
        "i18n@0.8.6",
        "debug@2.6.7",
        "ms@2.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N/E:F/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-NPMCONF-12143"
      ],
      "creationTime": "2018-02-27T09:54:39.824000Z",
      "credit": [
        "ChALkeR"
      ],
      "cvssScore": 7.4,
      "description": "## Overview\n\n[npmconf](https://www.npmjs.com/package/npmconf) is a package to reintegrate directly into npm.\n\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure.\nIt allocates and writes to disk uninitialized memory content when a typed number is passed as input.\r\n\r\n**Note** `npmconf` is deprecated and should not be used.\r\n**Note** This is vulnerable only for Node <=4\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n## Remediation\n\nUpgrade `npmconf` to version 2.1.3 or higher.\n\n\n## References\n\n- [HAckerOne Report](https://hackerone.com/reports/320269)\n",
      "disclosureTime": "2018-05-12T09:54:39Z",
      "exploit": "Functional",
      "functions": [],
      "fixedIn": [
        "2.1.3"
      ],
      "id": "npm:npmconf:20180512",
      "identifiers": {
        "CWE": [
          "CWE-201"
        ],
        "NSP": [
          "653"
        ],
        "CVE": [],
        "ALTERNATIVE": [
          "SNYK-JS-NPMCONF-12143"
        ],
        "GHSA": [
          "GHSA-57cf-349j-352g"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2020-12-14T14:41:00.940034Z",
      "moduleName": "npmconf",
      "packageManager": "npm",
      "packageName": "npmconf",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-13T14:26:27Z",
      "references": [
        {
          "title": "HAckerOne Report",
          "url": "https://hackerone.com/reports/320269"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Uninitialized Memory Exposure",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.1.3"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "npmconf@0.0.24"
      ],
      "upgradePath": [
        false,
        "npmconf@2.1.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "npmconf",
      "version": "0.0.24"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-SEMVER-10038"
      ],
      "creationTime": "2015-04-03T16:00:00Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The semver module uses regular expressions when parsing a version string. For a carefully crafted input, the time it takes to process these regular expressions is not linear to the length of the input. Since the semver module did not enforce a limit on the version string length, an attacker could provide a long string that would take up a large amount of resources, potentially taking a server down. This issue therefore enables a potential Denial of Service attack.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `semver` to version 4.3.2 or higher.\n## References\n- [GitHub Release](https://github.com/npm/npm/releases/tag/v2.7.5)\n",
      "disclosureTime": "2015-04-03T16:00:00Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "4.3.2"
      ],
      "id": "npm:semver:20150403",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "31"
        ],
        "CVE": [
          "CVE-2015-8855"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-SEMVER-10038"
        ],
        "GHSA": [
          "GHSA-x6fg-f45m-jf5q"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-22T12:28:36.289580Z",
      "moduleName": "semver",
      "packageManager": "npm",
      "packageName": "semver",
      "patches": [
        {
          "comments": [
            "https://github.com/npm/node-semver/commit/c80180d8341a8ada0236815c29a2be59864afd70.patch"
          ],
          "id": "patch:npm:semver:20150403:0",
          "modificationTime": "2019-12-03T11:40:45.754335Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/semver/20150403/semver_20150403_0_0_c80180d8341a8ada0236815c29a2be59864afd70.patch"
          ],
          "version": "<4.3.2 >= 2.0.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-04-03T16:00:00Z",
      "references": [
        {
          "title": "GitHub Release",
          "url": "https://github.com/npm/npm/releases/tag/v2.7.5"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "cvssDetails": [
        {
          "assigner": "NVD",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "severity": "high",
          "modificationTime": "2022-01-03T17:47:13.466963Z"
        }
      ],
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.3.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "goof@1.0.1",
        "npmconf@0.0.24",
        "semver@1.1.4"
      ],
      "upgradePath": [
        false,
        "npmconf@2.0.9",
        "semver@4.3.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "semver",
      "version": "1.1.4"
    },
    {
      "id": "snyk:lic:npm:goof:GPL-2.0",
      "packageName": "goof",
      "semver": {
        "vulnerable": [
          ">=0"
        ]
      },
      "creationTime": "2022-08-28T22:09:24.732Z",
      "description": "GPL-2.0 license",
      "language": "js",
      "license": "GPL-2.0",
      "packageManager": "npm",
      "publicationTime": "2022-08-28T22:09:24.732Z",
      "title": "GPL-2.0 license",
      "type": "license",
      "severity": "high",
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "goof",
      "version": "1.0.1"
    },
    {
      "id": "snyk:lic:npm:tslib:0BSD",
      "packageName": "tslib",
      "semver": {
        "vulnerable": [
          ">=1.11.2"
        ]
      },
      "creationTime": "2022-08-29T16:29:01.920Z",
      "description": "0BSD license",
      "language": "js",
      "license": "0BSD",
      "packageManager": "npm",
      "publicationTime": "2022-08-29T16:29:01.920Z",
      "title": "0BSD license",
      "type": "license",
      "severity": "high",
      "severityWithCritical": "high",
      "from": [
        "goof@1.0.1",
        "express-cart@1.1.17",
        "gulp-less@4.0.1",
        "less@3.13.1",
        "tslib@1.14.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "tslib",
      "version": "1.14.1"
    }
  ],
  "ok": false,
  "dependencyCount": 378,
  "org": "olegs-dev-team-1",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "0BSD": {
        "licenseType": "0BSD",
        "severity": "high",
        "instructions": ""
      },
      "AAL": {
        "licenseType": "AAL",
        "severity": "high",
        "instructions": ""
      },
      "Abstyles": {
        "licenseType": "Abstyles",
        "severity": "high",
        "instructions": ""
      },
      "Adobe-2006": {
        "licenseType": "Adobe-2006",
        "severity": "high",
        "instructions": ""
      },
      "Adobe-Glyph": {
        "licenseType": "Adobe-Glyph",
        "severity": "high",
        "instructions": ""
      },
      "ADSL": {
        "licenseType": "ADSL",
        "severity": "high",
        "instructions": ""
      },
      "AFL-1.1": {
        "licenseType": "AFL-1.1",
        "severity": "high",
        "instructions": ""
      },
      "Crossword": {
        "licenseType": "Crossword",
        "severity": "high",
        "instructions": ""
      },
      "CrystalStacker": {
        "licenseType": "CrystalStacker",
        "severity": "high",
        "instructions": ""
      },
      "CPL-1.0": {
        "licenseType": "CPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "CPAL-1.0": {
        "licenseType": "CPAL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "Conviva": {
        "licenseType": "Conviva",
        "severity": "high",
        "instructions": ""
      },
      "Condor-1.1": {
        "licenseType": "Condor-1.1",
        "severity": "high",
        "instructions": ""
      },
      "AFL-2.1": {
        "licenseType": "AFL-2.1",
        "severity": "high",
        "instructions": ""
      },
      "Afmparse": {
        "licenseType": "Afmparse",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": false,
    "disregardFilesystemIgnores": false
  },
  "summary": "24 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2020-11-08T09:37:44.217120Z",
        "credit": [
          "Dima Ryskin"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
        "disclosureTime": "2020-11-06T09:16:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.21.1"
        ],
        "id": "SNYK-JS-AXIOS-1038255",
        "identifiers": {
          "CWE": [
            "CWE-918"
          ],
          "NSP": [
            "NSP-1594"
          ],
          "CVE": [
            "CVE-2020-28168"
          ],
          "GHSA": [
            "GHSA-4w2v-q235-vp99"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-05-12T14:07:20.788739Z",
        "moduleName": "axios",
        "packageManager": "npm",
        "packageName": "axios",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-11-08T15:07:03Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/axios/axios/issues/3369"
          },
          {
            "title": "GitHub Security Advisory",
            "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99"
          },
          {
            "title": "NPM Advisory",
            "url": "https://www.npmjs.com/advisories/1594"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Server-Side Request Forgery (SSRF)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "severity": "medium",
            "modificationTime": "2022-01-03T18:07:34.834041Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.21.1"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "axios@0.19.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "axios",
        "version": "0.19.2",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-09-01T10:21:55.102099Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
        "disclosureTime": "2021-09-01T10:17:45Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.21.3"
        ],
        "id": "SNYK-JS-AXIOS-1579269",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-3749"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-22T15:25:03.056522Z",
        "moduleName": "axios",
        "packageManager": "npm",
        "packageName": "axios",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-01T16:08:42.935317Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-07-26T01:11:27.547463Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.21.3"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "axios@0.19.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "axios",
        "version": "0.19.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:F/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-12-07T14:51:46.208362Z",
        "credit": [
          "Aras Abbasi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes.\r\n\r\n## PoC:\r\n```js\r\n    fetch('form-image', {\r\n      method: 'POST',\r\n      headers: {\r\n        ['content-type']: 'multipart/form-data; boundary=----WebKitFormBoundaryoo6vortfDzBsDiro',\r\n        ['content-length']: '145',\r\n        host: '127.0.0.1:8000',\r\n        connection: 'keep-alive',\r\n      },\r\n      body: '------WebKitFormBoundaryoo6vortfDzBsDiro\\r\\n Content-Disposition: form-data; name=\"bildbeschreibung\"\\r\\n\\r\\n\\r\\n------WebKitFormBoundaryoo6vortfDzBsDiro--'\r\n    });\r\n```\n## Remediation\nThere is no fixed version for `dicer`.\n## References\n- [GitHub Commit](https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac)\n- [GitHub Issue](https://github.com/mscdex/busboy/issues/250)\n- [GitHub PR](https://github.com/mscdex/dicer/pull/22)\n",
        "disclosureTime": "2021-12-07T14:51:02Z",
        "exploit": "Functional",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-DICER-2311764",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2022-24434"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-09T21:50:31.265376Z",
        "moduleName": "dicer",
        "packageManager": "npm",
        "packageName": "dicer",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2022-05-19T10:52:23Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/mscdex/busboy/issues/250"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/mscdex/dicer/pull/22"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-06-07T13:11:23.181321Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "multer@1.4.4",
          "busboy@0.2.14",
          "dicer@0.2.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "dicer",
        "version": "0.2.5",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2019-04-07T11:52:46.618120Z",
        "credit": [
          "Avinash Hanwate"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[express-cart](https://www.npmjs.com/package/express-cart) is a fully functional shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). It allows a user to insert malicious payload in the user input field and the script gets reflected in the browser.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `express-cart`.\n## References\n- [HackerOne Report](https://hackerone.com/reports/395944)\n",
        "disclosureTime": "2019-04-07T09:19:38Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-EXPRESSCART-174131",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            "808"
          ],
          "CVE": [
            "CVE-2021-32573"
          ],
          "GHSA": [
            "GHSA-9pr3-7449-977r"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-05-12T09:31:19.323056Z",
        "moduleName": "express-cart",
        "packageManager": "npm",
        "packageName": "express-cart",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-04-07T11:53:01Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/395944"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.8,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:42:36.358325Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "express-cart",
        "version": "1.1.17",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-07-21T13:15:52.267242Z",
        "credit": [
          "saddean_"
        ],
        "cvssScore": 5.7,
        "description": "## Overview\n[express-cart](https://www.npmjs.com/package/express-cart) is a fully functional shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.\n\nAffected versions of this package are vulnerable to Cross-site Request Forgery (CSRF) via `admin.js`.\r\n\r\n## PoC:\r\n```\r\n<html>\r\n  <body>\r\n  <script>history.pushState('', '', '/')</script>\r\n    <form action=\"http://localhost:1111/admin/settings/discount/create\" method=\"POST\">\r\n      <input type=\"hidden\" name=\"code\" value=\"CSRF&#45;CODE&#45;DEMO\" />\r\n      <input type=\"hidden\" name=\"type\" value=\"percent\" />\r\n      <input type=\"hidden\" name=\"value\" value=\"30\" />\r\n      <input type=\"hidden\" name=\"start\" value=\"21&#47;02&#47;2020&#32;14&#58;32\" />\r\n      <input type=\"hidden\" name=\"end\" value=\"22&#47;02&#47;2020&#32;14&#58;32\" />\r\n      <input type=\"submit\" value=\"Submit request\" />\r\n    </form>\r\n  </body>\r\n</html>\r\n```\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/mrvautin/expressCart/commit/cd3ba1bc609c2f2946bfbc7ee2fccf3483eb71fb)\n- [HackerOne Report](https://hackerone.com/reports/800356)\n",
        "disclosureTime": "2020-07-21T07:58:43Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-EXPRESSCART-585983",
        "identifiers": {
          "CWE": [
            "CWE-352"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-07-21T15:12:55.514391Z",
        "moduleName": "express-cart",
        "packageManager": "npm",
        "packageName": "express-cart",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-21T15:12:55.512666Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mrvautin/expressCart/commit/cd3ba1bc609c2f2946bfbc7ee2fccf3483eb71fb"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/800356"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Request Forgery (CSRF)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "express-cart",
        "version": "1.1.17",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "credit": [
          "ranjit-git"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "disclosureTime": "2022-01-11T12:06:36Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.14.7"
        ],
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "identifiers": {
          "CWE": [
            "CWE-359"
          ],
          "CVE": [
            "CVE-2022-0155"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-12T12:49:36.151110Z",
        "moduleName": "follow-redirects",
        "packageManager": "npm",
        "packageName": "follow-redirects",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "severity": "medium",
            "modificationTime": "2022-02-09T16:10:37.080590Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "axios@0.19.2",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 2.6,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "disclosureTime": "2022-02-09T12:43:30Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.14.8"
        ],
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "CVE": [
            "CVE-2022-0536"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-09T17:20:22.056440Z",
        "moduleName": "follow-redirects",
        "packageManager": "npm",
        "packageName": "follow-redirects",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "RHEL",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "severity": "medium",
            "modificationTime": "2022-06-10T20:08:08.637621Z"
          },
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "severity": "medium",
            "modificationTime": "2022-02-12T04:10:26.549451Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "axios@0.19.2",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-07-19T12:00:32.890460Z",
        "credit": [
          "awarau"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash.set](https://www.npmjs.com/package/lodash.set) is a lodash method _.set exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `lodash.set`.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "disclosureTime": "2020-08-21T10:34:29Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-LODASHSET-1320032",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "moduleName": "lodash.set",
        "packageManager": "npm",
        "packageName": "lodash.set",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-21T12:53:03Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/864701"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "connect-mongodb-session@2.4.1",
          "archetype@0.12.0",
          "lodash.set@4.3.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash.set",
        "version": "4.3.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-08-31T17:55:54.822005Z",
        "credit": [
          "Alessio Della Libera of Snyk Research Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[mpath](https://www.npmjs.com/package/mpath) is a package that gets/sets javascript object values using MongoDB-like path notation.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2018-16490. In particular, the condition `ignoreProperties.indexOf(parts[i]) !== -1` returns `-1` if `parts[i]` is `['__proto__']`. This is because the method that has been called if the input is an array is `Array.prototype.indexOf()` and not `String.prototype.indexOf()`. They behave differently depending on the type of the input.\r\n\r\n### PoC\r\n```\r\nconst mpath = require('mpath');\r\n// mpath.set(['__proto__', 'polluted'], 'yes', {});\r\n// console.log(polluted); // ReferenceError: polluted is not defined\r\n\r\nmpath.set([['__proto__'], 'polluted'], 'yes', {});\r\nconsole.log(polluted); // yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mpath` to version 0.8.4 or higher.\n## References\n- [GitHub Commit](https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "disclosureTime": "2021-08-31T17:53:55Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.8.4"
        ],
        "id": "SNYK-JS-MPATH-1577289",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "CVE": [
            "CVE-2021-23438"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-11-05T14:26:16.092807Z",
        "moduleName": "mpath",
        "packageManager": "npm",
        "packageName": "mpath",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-09-01T16:28:19Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "severity": "critical",
            "modificationTime": "2022-01-03T16:36:22.011339Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.8.4"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "connect-mongodb-session@2.4.1",
          "archetype@0.12.0",
          "mpath@0.5.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "mpath",
        "version": "0.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-11-11T13:28:06.593166Z",
        "credit": [
          "Vineet Kumar"
        ],
        "cvssScore": 8.6,
        "description": "## Overview\n[nodemailer](https://www.npmjs.org/package/nodemailer) is an Easy as cake e-mail sending from your Node.js applications\n\nAffected versions of this package are vulnerable to Command Injection. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.\r\n\r\n### PoC\r\n```\r\n-bi@example.com (-bi Initialize the alias database.)\r\n-d0.1a@example.com (The option -d0.1 prints the version of sendmail and the options it was compiled with.)\r\n-Dfilename@example.com (Debug output ffile)\r\n```\n## Remediation\nUpgrade `nodemailer` to version 6.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/nodemailer/nodemailer/commit/ba31c64c910d884579875c52d57ac45acc47aa54)\n- [Vulnerable Code](https://github.com/nodemailer/nodemailer/blob/33b62e2ea6bc9215c99a9bb4bfba94e2fb27ebd0/lib/sendmail-transport/index.js#L75)\n",
        "disclosureTime": "2020-11-11T13:17:31Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "6.4.16"
        ],
        "id": "SNYK-JS-NODEMAILER-1038834",
        "identifiers": {
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-48ww-j4fc-435p"
          ],
          "CVE": [
            "CVE-2020-7769"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:29.600807Z",
        "moduleName": "nodemailer",
        "packageManager": "npm",
        "packageName": "nodemailer",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-11-12T16:54:00.101512Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/nodemailer/nodemailer/commit/ba31c64c910d884579875c52d57ac45acc47aa54"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/nodemailer/nodemailer/blob/33b62e2ea6bc9215c99a9bb4bfba94e2fb27ebd0/lib/sendmail-transport/index.js%23L75"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Command Injection",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "severity": "critical",
            "modificationTime": "2022-01-03T18:10:13.792167Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<6.4.16"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "nodemailer@4.7.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "nodemailer",
        "version": "4.7.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-05-24T11:54:07.769311Z",
        "credit": [
          "Adam Williams"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[nodemailer](https://www.npmjs.org/package/nodemailer) is an Easy as cake e-mail sending from your Node.js applications\n\nAffected versions of this package are vulnerable to HTTP Header Injection if unsanitized user input that may contain newlines and carriage returns is passed into an address object.\r\n\r\n### PoC:\r\n```\r\nconst userEmail = 'foo@bar.comrnSubject: foobar'; // imagine this comes from e.g. HTTP request params or is otherwise user-controllable\r\nawait transporter.sendMail({\r\nfrom: '...',\r\nto: '...',\r\nreplyTo: {\r\nname: 'Customer',\r\naddress: userEmail,\r\n},\r\nsubject: 'My Subject',\r\ntext: message,\r\n});\r\n```\n## Remediation\nUpgrade `nodemailer` to version 6.6.1 or higher.\n## References\n- [GitHub Commit](https://github.com/nodemailer/nodemailer/commit/7e02648cc8cd863f5085bad3cd09087bccf84b9f)\n- [GitHub Issue](https://github.com/nodemailer/nodemailer/issues/1289)\n",
        "disclosureTime": "2021-05-24T11:46:50Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "6.6.1"
        ],
        "id": "SNYK-JS-NODEMAILER-1296415",
        "identifiers": {
          "CWE": [
            "CWE-644"
          ],
          "CVE": [
            "CVE-2021-23400"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-06-28T16:21:02.032385Z",
        "moduleName": "nodemailer",
        "packageManager": "npm",
        "packageName": "nodemailer",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-06-28T16:21:01.997291Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/nodemailer/nodemailer/commit/7e02648cc8cd863f5085bad3cd09087bccf84b9f"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/nodemailer/nodemailer/issues/1289"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "HTTP Header Injection",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.8,
            "severity": "high",
            "modificationTime": "2022-01-03T16:36:04.677850Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<6.6.1"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "nodemailer@4.7.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "nodemailer",
        "version": "4.7.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-09-17T14:35:00.993728Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
        "disclosureTime": "2021-09-17T14:32:39Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.0.1"
        ],
        "id": "SNYK-JS-NTHCHECK-1586032",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": [
            "CVE-2021-3803"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-13T10:42:22.281450Z",
        "moduleName": "nth-check",
        "packageManager": "npm",
        "packageName": "nth-check",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-17T15:20:51Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "severity": "high",
            "modificationTime": "2022-07-30T01:10:54.517007Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "cheerio@0.22.0",
          "css-select@1.2.0",
          "nth-check@1.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "nth-check",
        "version": "1.0.2",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2021-02-09T08:21:52.232749Z",
        "credit": [
          "Ron Masas",
          "Checkmarx"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Validation Bypass. There is no proper validation of the hostnames set by the `allowedIframeHostnames` option when the `allowIframeRelativeUrls` is set to `true`. This allows attackers to bypass the hostname whitelist for the iframe element.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/460)\n- [POC: Potential Exploit](https://advisory.checkmarx.net/advisory/CX-2021-4309)\n",
        "disclosureTime": "2021-02-09T08:07:33Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.3.2"
        ],
        "id": "SNYK-JS-SANITIZEHTML-1070780",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-mjxr-4v3x-q3m4"
          ],
          "CVE": [
            "CVE-2021-26540"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-24T13:25:49.434343Z",
        "moduleName": "sanitize-html",
        "packageManager": "npm",
        "packageName": "sanitize-html",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-02-09T16:34:45.881363Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apostrophecms/sanitize-html/commit/6012524e7824a2c8f6782b2bc5f93b1261723403"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/apostrophecms/sanitize-html/pull/460"
          },
          {
            "title": "POC: Potential Exploit",
            "url": "https://advisory.checkmarx.net/advisory/CX-2021-4309"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Validation Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "severity": "medium",
            "modificationTime": "2022-01-03T16:36:59.234021Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.3.2"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "sanitize-html@1.27.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "sanitize-html",
        "version": "1.27.5",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2021-02-09T08:37:16.368073Z",
        "credit": [
          "Ron Masas",
          "Checkmarx"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Access Restriction Bypass. Internationalized domain name (IDN) is not properly handled. This allows attackers to bypass hostname whitelist validation set by the `allowedIframeHostnames` option.\n## Remediation\nUpgrade `sanitize-html` to version 2.3.1 or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/458)\n",
        "disclosureTime": "2021-02-09T08:21:55Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.3.1"
        ],
        "id": "SNYK-JS-SANITIZEHTML-1070786",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-rjqq-98f6-6j3r"
          ],
          "CVE": [
            "CVE-2021-26539"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-10-13T13:44:46.998835Z",
        "moduleName": "sanitize-html",
        "packageManager": "npm",
        "packageName": "sanitize-html",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-02-09T16:34:49Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/apostrophecms/sanitize-html/pull/458"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Access Restriction Bypass",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [
          {
            "assigner": "NVD",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "severity": "medium",
            "modificationTime": "2022-04-27T01:10:36.338203Z"
          }
        ],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.3.1"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "sanitize-html@1.27.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "sanitize-html",
        "version": "1.27.5",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2022-07-21T08:00:56.827849Z",
        "credit": [
          "Nariyoshi Chida of NTT Security Japan"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure global regular expression replacement logic of HTML comment removal.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `sanitize-html` to version 2.7.1 or higher.\n## References\n- [GitHub Commit](https://github.com/apostrophecms/sanitize-html/commit/b4682c12fd30e12e82fa2d9b766de91d7d2cd23c)\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/557)\n",
        "disclosureTime": "2022-07-21T07:37:40Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.7.1"
        ],
        "id": "SNYK-JS-SANITIZEHTML-2957526",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": [
            "CVE-2022-25887"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-08-29T13:28:12.441729Z",
        "moduleName": "sanitize-html",
        "packageManager": "npm",
        "packageName": "sanitize-html",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2022-08-29T13:28:12.439235Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/apostrophecms/sanitize-html/commit/b4682c12fd30e12e82fa2d9b766de91d7d2cd23c"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/apostrophecms/sanitize-html/pull/557"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.7.1"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "sanitize-html@1.27.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "sanitize-html",
        "version": "1.27.5",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "alternativeIds": [],
        "creationTime": "2020-07-17T15:02:43.082824Z",
        "credit": [
          "mikesamuel"
        ],
        "cvssScore": 9.4,
        "description": "## Overview\n[sanitize-html](https://github.com/punkave/sanitize-html) is a library that allows you to clean up user-submitted HTML, preserving whitelisted elements and whitelisted attributes on a per-element basis\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. Tag transformations which turn an attribute value into a text node using `transformTags` could be vulnerable to code execution.\n## Remediation\nUpgrade `sanitize-html` to version 2.0.0-beta or higher.\n## References\n- [GitHub PR](https://github.com/apostrophecms/sanitize-html/pull/156)\n",
        "disclosureTime": "2020-09-07T09:46:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.0-beta"
        ],
        "id": "SNYK-JS-SANITIZEHTML-585892",
        "identifiers": {
          "CWE": [
            "CWE-94"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2020-09-07T15:37:06.961614Z",
        "moduleName": "sanitize-html",
        "packageManager": "npm",
        "packageName": "sanitize-html",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-09-07T09:46:10Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/apostrophecms/sanitize-html/pull/156"
          }
        ],
        "severity": "critical",
        "socialTrendAlert": false,
        "title": "Arbitrary Code Execution",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.0.0-beta"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "sanitize-html@1.27.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "sanitize-html",
        "version": "1.27.5",
        "severityWithCritical": "critical"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2021-09-30T14:25:50.130236Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n",
        "disclosureTime": "2021-09-30T14:22:21Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.14.3"
        ],
        "id": "SNYK-JS-UGLIFYJS-1727251",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-11-09T18:42:15.332622Z",
        "moduleName": "uglify-js",
        "packageManager": "npm",
        "packageName": "uglify-js",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-11-09T18:42:15.313328Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/mishoo/UglifyJS/issues/5133"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/mishoo/UglifyJS/pull/5134"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/mishoo/UglifyJS/pull/5135"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "cvssDetails": [],
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<3.14.3"
          ]
        },
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "gulp-less@4.0.1",
          "accord@0.29.0",
          "uglify-js@2.8.29"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "uglify-js",
        "version": "2.8.29",
        "severityWithCritical": "medium"
      },
      {
        "id": "snyk:lic:npm:goof:GPL-2.0",
        "packageName": "goof",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "creationTime": "2022-08-28T22:09:24.732Z",
        "description": "GPL-2.0 license",
        "language": "js",
        "license": "GPL-2.0",
        "packageManager": "npm",
        "publicationTime": "2022-08-28T22:09:24.732Z",
        "title": "GPL-2.0 license",
        "type": "license",
        "severity": "high",
        "from": [
          "goof@1.0.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "goof",
        "version": "1.0.1",
        "severityWithCritical": "high"
      },
      {
        "id": "snyk:lic:npm:tslib:0BSD",
        "packageName": "tslib",
        "semver": {
          "vulnerable": [
            ">=1.11.2"
          ]
        },
        "creationTime": "2022-08-29T16:29:01.920Z",
        "description": "0BSD license",
        "language": "js",
        "license": "0BSD",
        "packageManager": "npm",
        "publicationTime": "2022-08-29T16:29:01.920Z",
        "title": "0BSD license",
        "type": "license",
        "severity": "high",
        "from": [
          "goof@1.0.1",
          "express-cart@1.1.17",
          "gulp-less@4.0.1",
          "less@3.13.1",
          "tslib@1.14.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tslib",
        "version": "1.14.1",
        "severityWithCritical": "high"
      }
    ],
    "upgrade": {
      "npmconf@0.0.24": {
        "upgradeTo": "npmconf@2.1.3",
        "upgrades": [
          "npmconf@0.0.24",
          "semver@1.1.4",
          "ini@1.1.0"
        ],
        "vulns": [
          "npm:npmconf:20180512",
          "npm:semver:20150403",
          "SNYK-JS-INI-1048974"
        ]
      }
    },
    "patch": {
      "npm:debug:20170905": {
        "paths": [
          {
            "express-cart > i18n > debug": {
              "patched": "2022-08-30T17:57:54.202Z"
            }
          }
        ]
      },
      "npm:ms:20170412": {
        "paths": [
          {
            "express-cart > i18n > debug > ms": {
              "patched": "2022-08-30T17:57:54.202Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 24,
  "projectName": "goof",
  "foundProjectCount": 1,
  "displayTargetFile": "package-lock.json",
  "path": "/Users/olegshprengel/Desktop/vulnerable-NPM-project"
}
